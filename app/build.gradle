import org.apache.tools.ant.taskdefs.condition.Os
//apply plugin: 'com.android.library'
apply plugin: 'com.android.application'

android {
    useLibrary 'org.apache.http.legacy'

    compileSdkVersion 26
    buildToolsVersion '27.0.3'

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
    defaultConfig {
        applicationId "uk.ac.ucl.ndnocr"
        minSdkVersion 23
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        multiDexEnabled true

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath false
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            jniDebuggable true
        }
    }

    sourceSets {
        main {
            java.srcDirs "src/main/java"
            res.srcDirs "src/main/res"
          //  jniLibs.srcDir 'src/main/libs'
          //  jni.srcDirs = [] //disable automatic ndk-build call
        }
        androidTest.setRoot('tests')
        androidTest.java.srcDirs = ['tests/src']
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

dependencies {
    compile 'com.github.TeamNewPipe:NewPipeExtractor:b9d0941'
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile('com.intel.jndn.management:jndn-management:1.1.0') {
        exclude group: 'net.named-data', module: 'jndn'
    }
    //compile files('libs/jndn-0.15.jar')
    //compile files('libs/sqlite-jdbc-3.21.0.jar')
    //compile 'org.sqldroid:sqldroid:1.0.3'
    compile 'net.grandcentrix.tray:tray:0.12.0'
    compile 'com.google.firebase:firebase-messaging:11.0.4'
    compile('com.firebase:firebase-jobdispatcher-with-gcm-dep:0.6.0') {
        exclude module: "play-services-gcm"
    }
    compile 'com.android.support:appcompat-v7:27.1.0'
    compile 'com.android.support:support-v4:27.1.0'
    compile 'com.android.support:design:27.1.0'
    compile 'com.android.support:recyclerview-v7:27.1.0'
    compile 'com.android.support:preference-v14:27.1.0'
    compile 'com.google.firebase:firebase-storage:11.0.4'
    compile 'com.google.firebase:firebase-auth:11.0.4'
    compile 'net.named-data.jndn-xx:jndn-xx-util:0.0.1'
    compile 'com.google.android.gms:play-services:11.0.4'
    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'joda-time:joda-time:2.7'
    //compile files('libs/netty-buffer-4.1.0.Beta5.jar')
    //compile files('libs/netty-common-4.1.0.Beta5.jar')
    compile 'com.google.protobuf:protobuf-java:2.6.1'
    compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.5'
    compile 'de.hdodenhof:circleimageview:2.1.0'
    compile 'com.github.nirhart:parallaxscroll:1.0'
    compile 'com.nononsenseapps:filepicker:3.0.1'
    compile 'com.google.android.exoplayer:exoplayer:r2.5.4'
    compile 'io.reactivex.rxjava2:rxjava:2.1.2'
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
    compile 'com.jakewharton.rxbinding2:rxbinding:2.0.0'
    compile 'android.arch.persistence.room:runtime:1.0.0-alpha8'
    compile 'android.arch.persistence.room:rxjava2:1.0.0-alpha8'
    annotationProcessor 'android.arch.persistence.room:compiler:1.0.0-alpha8'
    compile 'frankiesardo:icepick:3.2.0'
    provided 'frankiesardo:icepick-processor:3.2.0'
    implementation project(':kbapp')
}

//apply plugin: 'com.android.application'
//apply plugin: 'com.google.gms.google-services'


Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

if (properties['keystore'] == null || properties['keystore.password'] == null ||
        properties['keystore.key.alias'] == null || properties['keystore.key.password'] == null) {
    println("Cannot sign .apk: specify keystore, keystore.password, keystore.key.alias, and keystore.key.password in local.properties.")
} else {
    android {
        signingConfigs {
            release {
                storeFile file(properties['keystore'])
                storePassword properties['keystore.password']
                keyAlias properties['keystore.key.alias']
                keyPassword properties['keystore.key.password']
            }
        }
        buildTypes {
            release {
                signingConfig signingConfigs.release
            }
        }
    }
}

if (properties['google-play'] != null) {
    apply plugin: 'net.named-data.playground.play'

    play {
        track = 'alpha'
        jsonFile = file(properties['google-play'])
    }
}

